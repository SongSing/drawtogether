{"version":3,"sources":["LoginPage.tsx","util.ts","eventclass.ts","socket.ts","point.ts","rectangle.ts","canvas.ts","ColorCircle.tsx","SizeCircle.tsx","ToolCircle.tsx","DrawingPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["LoginPage","props","state","server","handleServerChange","bind","event","this","setState","target","value","className","type","onChange","onClick","onSubmit","React","Component","array_remove","array","item","index","indexOf","splice","existed","EventClass","events","Map","eventNames","forEach","eventName","createEvent","name","has","set","args","console","warn","get","o","fn","id","push","wrapper","log","Socket","socket","ip","WebSocket","addEventListener","data","obj","JSON","parse","emitEvent","command","toSend","send","stringify","Point","x","y","undefined","offset","unitX","inverted","times","unitY","p","Math","round","n","ret","copy","multiply","divideBy","add","subtract","sqrt","minus","squared","sum","abs","min","max","sizeLike","width","height","pointLike","Rectangle","position","size","operand","plus","rect","anchor","ar","aspectRatio","startPoint","getPointFromAnchor","setPointFromAnchor","factor","bl","bottomLeft","br","bottomRight","tl","topLeft","tr","topRight","boundingRect","center","containsRect","right","setWidthKeepAR","bottom","setHeightKeepAR","left","top","r","point","aboutCenter","c","rounded","containsPoint","area","overlapArea","cx","cy","p1","p2","Canvas","options","canvas","translation","align","usingDeepCalc","mouse","context","canvasElement","document","querySelector","createElement","getContext","alpha","opaque","resize","horizontal","vertical","style","transformOrigin","deepCalc","pixelated","deepCalcPosition","window","isDown","lastPos","originalPos","move","down","up","leave","mouseMove","mouseDown","mouseUp","mouseLeave","substr","redraw","cloneNode","drawImage","amount","wRatio","hRatio","zoom","clearRect","z","isNaN","offsetLeft","offsetTop","getComputedStyle","scrollLeft","parseInt","getPropertyValue","scrollTop","offsetParent","e","MouseEvent","clientX","clientY","changedTouches","bounds","getBoundingClientRect","dividedBy","pos","posFromEvent","call","callback","mimeType","toBlob","blob","autoRevoke","Image","onload","URL","revokeObjectURL","src","url","createObjectURL","image","cropRegion","rotate","ctx","save","translate","restore","resizeCanvasToFit","start","end","color","lineWidth","beginPath","moveTo","lineTo","stroke","sharp","translated","strokeRect","fillRect","radius","arcTo","closePath","fill","text","baseline","font","textBaseline","textAlign","fillText","arc","PI","diameter","isSquare","fillCircleInSquare","ellipse","drawCircleInSquare","w","h","bool","mozImageSmoothingEnabled","webkitImageSmoothingEnabled","imageSmoothingEnabled","imageRendering","globalAlpha","opacity","fillStyle","val","strokeStyle","globalCompositeOperation","getLineDash","dash","setLineDash","getImageData","file","img","HTMLCanvasElement","prototype","Object","defineProperty","quality","setTimeout","binStr","atob","toDataURL","split","len","length","arr","Uint8Array","i","charCodeAt","Blob","ColorCircle","backgroundColor","display","handleChange","SizeCircle","onIncrement","onDecrement","handleIncrement","toString","handleDecrement","ToolCircle","onToggle","toolIcon","tool","backgroundImage","handleClick","DrawingPage","lastWrite","writeThrottle","_canvas","toArray","write","mouseIsDown","now","Date","from","to","_data","drawLine","fromArray","on","handleData","refs","preventDefault","passive","lineJoin","lineCap","link","download","href","click","handleColorChange","handleToggleTool","saveBoard","clearBoard","ref","App","connected","handleClose","connect","pageToRender","handleSubmit","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.82c5efc4.chunk.js","sourcesContent":["import React from 'react';\n\ninterface Props {\n    onSubmit: (server: string) => any\n}\n\ninterface State {\n    server: string;\n}\n\nexport default class LoginPage extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            server: '192.168.1.149:5000'\n        };\n\n        this.handleServerChange = this.handleServerChange.bind(this);\n    }\n\n    handleServerChange(event: React.ChangeEvent<HTMLInputElement>) {\n        this.setState({...this.state, server: event.target.value});\n    }\n\n    render() {\n        return (\n            <div className='page loginPage'>\n                <h1>welcome,,,</h1>\n                <span>Server: </span>\n                <input type='text' value={this.state.server} onChange={this.handleServerChange}></input>\n                <button onClick={() => this.props.onSubmit(this.state.server)}>Join</button>\n            </div>\n        );\n    }\n}","export type SortFunction<T> = (a : T, b : T) => boolean;\n\nexport function $<T extends HTMLElement>(selector : string) : T\n{\n    return document.querySelector(selector) as T;\n}\n\nexport function createElement(type : string, className : string = \"\") : HTMLElement\n{\n    let ret = document.createElement(type);\n    ret.className = className;\n    return ret;\n}\n\nexport function string_startsWith(str : string, test : string) : boolean\n{\n    return str.substr(0, test.length) === test;\n}\n\nexport function string_endsWidth(str : string, test : string) : boolean\n{\n    return str.substr(str.length - test.length) === test;\n}\n\nexport function array_max<T>(array : T[]) : T\n{\n    let ret = array[0];\n    for (let i = 1; i < array.length; i++)\n    {\n        if (array[i] > ret)\n        {\n            ret = array[i];\n        }\n    }\n\n    return ret;\n}\n\nexport function array_ensureOne<T>(array : T[], item : T) : { item : T, index : number, existed: boolean }\n{\n    let i = array.indexOf(item);\n\n    if (i === -1)\n    {\n        array.push(item);\n        return { item, index: array.length - 1, existed: false };\n    }\n    else\n    {\n        return { item, index: i, existed: true };\n    }\n}\n\nexport function httpGET(url : string, callback : (result : string | ArrayBuffer) => void, responseType? : XMLHttpRequestResponseType) : void\n{\n    let request = new XMLHttpRequest();\n    if (responseType)\n    {\n        request.responseType = responseType;\n    }\n    request.addEventListener(\"load\", function()\n    {\n        callback(this.response);\n    });\n    request.open(\"GET\", url);\n    request.send();\n}\n\nexport function mod(x : number, m : number) : number\n{\n    if (x >= 0)\n    {\n        return x % m;\n    }\n    else\n    {\n        return m - (-x % m);\n    }\n}\n\nexport function numberArray(startInclusive : number, endExclusive : number) : number[]\n{\n    let ret = [];\n\n    for (let i = startInclusive; i < endExclusive; i++)\n    {\n        ret.push(i);\n    }\n\n    return ret;\n}\n\n// https://codepen.io/gapcode/pen/vEJNZN\nexport function getIEVersion() : boolean | number\n{\n    var ua = window.navigator.userAgent;\n\n    // Test values; Uncomment to check result …\n\n    // IE 10\n    // ua = 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Trident/6.0)';\n\n    // IE 11\n    // ua = 'Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko';\n\n    // Edge 12 (Spartan)\n    // ua = 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.71 Safari/537.36 Edge/12.0';\n\n    // Edge 13\n    // ua = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2486.0 Safari/537.36 Edge/13.10586';\n\n    var msie = ua.indexOf('MSIE ');\n    if (msie > 0) {\n        // IE 10 or older => return version number\n        return parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10);\n    }\n\n    var trident = ua.indexOf('Trident/');\n    if (trident > 0) {\n        // IE 11 => return version number\n        var rv = ua.indexOf('rv:');\n        return parseInt(ua.substring(rv + 3, ua.indexOf('.', rv)), 10);\n    }\n\n    var edge = ua.indexOf('Edge/');\n    if (edge > 0) {\n        // Edge (IE 12+) => return version number\n        return parseInt(ua.substring(edge + 5, ua.indexOf('.', edge)), 10);\n    }\n\n    // other browser\n    return false;\n}\n\nexport function makePixelated(e : HTMLImageElement | HTMLCanvasElement, pixelate : boolean = true) : void\n{\n    if (pixelate)\n    {\n        let types = [ \"optimizeSpeed\", \"crisp-edges\", \"-moz-crisp-edges\", \"-webkit-optimize-contrast\", \"optimize-contrast\", \"pixelated\" ];\n        types.forEach(type => e.style.imageRendering = type);\n    }\n    else\n    {\n        e.style.imageRendering = \"\";\n    }\n}\n\nexport function createOptionElement(text : string, value : string) : HTMLOptionElement\n{\n    let ret = document.createElement(\"option\");\n    ret.innerText = text;\n    ret.value = value;\n\n    return ret;\n}\n\nexport function hideElement(element : HTMLElement | string) : void\n{\n    if (typeof element === \"string\")\n    {\n        hideElement($(element));\n    }\n    else\n    {\n        element.style.display = \"none\";\n    }\n}\n\nexport function showElement(element : HTMLElement | string) : void\n{\n    if (typeof element === \"string\")\n    {\n        showElement($(element));\n    }\n    else\n    {\n        element.style.display = \"\";\n    }\n}\n\nexport function element_isScrolledTo(element : HTMLElement, allowPartial : boolean = false)\n{\n    let height = element.getBoundingClientRect().height;\n    let top = element.offsetTop;\n    let bottom = top + height;\n\n    let parent = element.parentElement;\n    if (!parent) return false;\n    let parentHeight = parent.getBoundingClientRect().height;\n    let scrollTop = parent.scrollTop;\n    \n    if (allowPartial)\n    {\n        return !(scrollTop + parentHeight <= top || scrollTop >= bottom);\n    }\n    else\n    {\n        return !(scrollTop + parentHeight < bottom || scrollTop > top);\n    }\n}\n\nexport function element_scrollIntoView(element : HTMLElement, align : \"top\" | \"center\" | \"bottom\") : void\n{\n    let height = element.getBoundingClientRect().height;\n    let top = element.offsetTop;\n    let bottom = top + height;\n\n    let parent = element.parentElement;\n    if (!parent) return;\n    let parentHeight = parent.getBoundingClientRect().height;\n    // let scrollHeight = parent.scrollHeight;\n\n    switch (align)\n    {\n        case \"top\":\n            parent.scrollTop = top;\n            break;\n        case \"center\":\n            parent.scrollTop = parentHeight / 2 - height / 2;\n            break;\n        case \"bottom\":\n            parent.scrollTop = bottom - parentHeight;\n            break;\n    }\n}\n\nexport function element_scrollIntoViewIfNeeded(element : HTMLElement, align : \"top\" | \"center\" | \"bottom\", allowPartial : boolean) : void\n{\n    if (!element_isScrolledTo(element, allowPartial))\n    {\n        element_scrollIntoView(element, align);\n    }\n}\n\nexport function endsWith(str : string, endsWith : string) : boolean\n{\n    if (endsWith.length > str.length)\n    {\n        return false;\n    }\n    \n    return str.substr(str.length - endsWith.length) === endsWith;\n}\n\nexport function emptyFn() {}\n\nexport function array_contains<T>(array: T[], item : T) : boolean\n{\n    return array.indexOf(item) !== -1;\n}\n\nexport function array_remove<T>(array : T[], item : T) : { item : T, index : number, existed : boolean }\n{\n    let index = array.indexOf(item);\n    if (index !== -1)\n    {\n        array.splice(index, 1);\n        return { item, index, existed: true };\n    }\n\n    return { item, index: -1, existed: false };\n}\n\nexport function array_remove_all<T>(array : T[], item : T) : { item : T, indexes : number[], existed : boolean }\n{\n    let indexes = [];\n\n    let index;\n\n    while ((index = array.indexOf(item)) !== -1)\n    {\n        indexes.push(index);\n        array.splice(index, 1);\n    }\n\n    return { item, indexes: indexes, existed: indexes.length > 0 };\n}\n\nexport function array_item_at<T>(array : T[], index : number) : T\n{\n    if (index >= array.length)\n    {\n        return array[index % array.length];\n    }\n    else if (index < 0)\n    {\n        return array[array.length - (-index % array.length)];\n    }\n    else\n    {\n        return array[index];\n    }\n}\n\nexport function array_remove_at<T>(array : T[], index : number) : { item : T | null, index : number, existed : boolean }\n{    \n    if (index !== -1)\n    {\n        return { item: array.splice(index, 1)[0], index, existed: true };\n    }\n\n    return { item: null, index: -1, existed: false };\n}\n\nexport function array_insert<T>(array : T[], item : T, index_or_fn : number | SortFunction<T>) : { item : T, index : number }\n{\n    if (typeof index_or_fn === \"number\")\n    {\n        array.splice(index_or_fn, 0, item);\n        return { item: item, index: index_or_fn };\n    }\n    else\n    {\n        for (let i = 0; i < array.length; i++)\n        {\n            if (index_or_fn(item, array[i]))\n            {\n                array.splice(i, 0, item);\n                return { item: item, index: i };\n            }\n        }\n\n        array.push(item);\n        return { item: item, index: array.length - 1 };\n    }\n\n}\n\nexport function array_copy<T>(array : T[]) : T[]\n{\n    return array.slice();\n}\n\nexport function array_shuffle<T>(array : T[]) : void\n{\n    let i = 0;\n    let j = 0;\n    let temp = null;\n    \n    for (i = array.length - 1; i > 0; i -= 1)\n    {\n        j = Math.floor(Math.random() * (i + 1));\n        temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n    }\n}\n\nexport function array_insert_random<T>(array : T[], item : T) : { index : number, item : T }\n{\n    let index = Math.floor(Math.random() * (array.length + 1));\n    return array_insert(array, item, index);\n}\n\nexport function array_last<T>(array : T[]) : T\n{\n    return array[array.length - 1];\n}\n\nexport function array_swap<T>(array : T[], a : number | T, b : number | T) : void\n{\n    if (typeof(a) !== \"number\")\n    {\n        a = array.indexOf(a);\n    }\n\n    if (typeof(b) !== \"number\")\n    {\n        b = array.indexOf(b);\n    }\n\n    let temp = array[a];\n    array[a] = array[b];\n    array[b] = temp;\n}\n\nexport function stopProp(e : MouseEvent) : void\n{\n    e.stopPropagation();\n}\n\nexport function getRainbowColor(n : number) : string\n{\n    let r = ~~(255 * (n < 0.5 ? 1 : 1 - 2 * (n - 0.5)));\n    let g = ~~(255 * (n < 0.5 ? 2 * n : 1));\n    let b = ~~(255 * (n > 0.5 ? 2 * (n - 0.5) : 0));\n    let color = \"rgb(\" + r + \",\" + g + \",\" + b + \")\";\n    return color;\n}\n\nexport function getCurrentMs() : number\n{\n    return Date.now();\n}\n\nexport function sign(n : number) : number\n{\n    return (n > 0 ? 1 : (n < 0 ? -1 : 0));\n}","import { array_remove } from \"./util\";\n\n/**\n * A class to be extended to allow for the emitting of events. This allows for async communication amongst classes.\n * \n * Example:\n * ```typescript\n * // Cat is a class that emits an event \"meow\" occasionally. Person is a class with a `pet` method.\n * // We're going to make it so whenever the cat emits the \"meow\" event, the person will pet it.\n * let cat = new Cat();\n * let person = new Person();\n * \n * cat.on(\"meow\", () =>\n * {\n *     person.pet(cat);\n * });\n * \n * // Events are emitted using [[emitEvent]], usually within the class. So the following code will occur somewhere within the Cat class:\n * this.emitEvent(\"meow\");\n * ```\n */\nexport class EventClass\n{\n    /** Map of event names to functions and ids, used internally. */\n    private events : Map<string, { fn : Function, id : string }[]> = new Map<string, { fn : Function, id : string }[]>();\n\n    /**\n     * This constructor is usually called via `super`, and may provide an easy way to define the events that a class plans to emit. Example:\n     * ```typescript\n     * class Cat extends EventClass\n     * {\n     *     constructor()\n     *     {\n     *         super\n     *         ([\n     *             \"meow\",\n     *             \"purr\"\n     *         ]);\n     *     }\n     * }\n     * ```\n     * @param eventNames An array of event names to initialize the class with. This is the same as calling [[createEvent]] for each of the names.\n     */\n    constructor(...eventNames : string[])\n    {\n        eventNames.forEach((eventName) =>\n        {\n            this.createEvent(eventName);\n        });\n    }\n\n    /**\n     * Creates an entry for a new event. This is used when extending a class that extends EventClass but does not extend the [[constructor]]'s eventNames parameter.\n     * ```typescript\n     * class AnnoyingCat extends Cat\n     * {\n     *     constructor()\n     *     {\n     *         super();\n     *         this.createEvent(\"yowl\");\n     *     }\n     * }\n     * ```\n     * @param name The name of the event.\n     */\n    protected createEvent(name : string)\n    {\n        if (!this.events.has(name))\n        {\n            this.events.set(name, []);\n        }\n    }\n\n    /**\n     * Emits an event with optional parameters.\n     * @param event Name of the event to emit.\n     * @param args Additional arguments can be provided that will be passed along to receiving functions. Example:\n     * ```typescript\n     * // in a CollectorThing class:\n     * this.emitEvent(\"somethingadded\", amountAdded); // amountAdded is a number here\n     * // in some other class:\n     * collectorThing.on(\"somethingadded\", (amountAdded : number) =>\n     * {\n     *     this.total += amountAdded;\n     * });\n     * ```\n     */\n    public emitEvent(event : string, ...args : any[]) : void\n    {\n        if (!this.events.has(event))\n        {\n            console.warn(\"event not yet created: \" + event);\n            this.events.set(event, []);\n        }\n\n        (this.events.get(event) as any).forEach((o : any) => o.fn(...args));\n    }\n\n    /**\n     * Watches for an event, calling a receiving function any time it's emitted.\n     * @param event Name of the event to watch for.\n     * @param fn Receiving function, will be called whenever the event is emitted.\n     * @param id Optional id for use with debugging. Useful if you have a lot of things attached to an event and you want to see what they are at some point.\n     */\n    public on(event : string, fn : Function, id : string = \"[unidentified]\")\n    {\n        if (!this.events.has(event))\n        {\n            console.warn(\"event not yet created: \" + event);\n            this.events.set(event, []);\n        }\n\n        (this.events.get(event) as any).push({ fn, id });\n    }\n\n    /**\n     * Similar to [[on]], but registers a receiving function to occur only upon the next emission of the event.\n     * @param event Name of the event to watch for.\n     * @param fn Receiving function, will be called only one time.\n     * @param id Optional id for use with debugging. Useful if you have a lot of things attached to an event and you want to see what they are at some point.\n     */\n    public once(event : string, fn : Function, id : string = \"[unidentified oneshot]\")\n    {\n        if (!this.events.has(event))\n        {\n            console.warn(\"event not yet created: \" + event);\n            this.events.set(event, []);\n        }\n\n        let wrapper = \n        {\n            fn: (...args : any[]) =>\n            {\n                fn(...args);\n                array_remove(this.events.get(event) as any, wrapper);\n            },\n            id\n        };\n        \n        (this.events.get(event) as any).push(wrapper);\n    }\n\n    /**\n     * Will print out a list of ids that have registered themselves with an event. These ids correspond to the ones passed in [[on]] and [[once]].\n     * @param event The name of the event to debug.\n     */\n    public debugEvent(event : string)\n    {\n        if (!this.events.has(event))\n        {\n            console.warn(\"event not yet created: \" + event);\n            this.events.set(event, []);\n        }\n\n        console.log(\"ids registered to event `\" + event + \"`:\");\n        (this.events.get(event) as any).forEach((o: any) => console.log(o.id));\n    }\n}\n\n/** A global instance of an EventClass, for when things need to be attached to the global scope instead of a specific class. */\nexport const GlobalEvents = new EventClass();","import { EventClass } from './eventclass';\n\ntype SocketDataObject =\n{\n    command: string,\n    token : string,\n    data: any\n};\n\nexport class Socket extends EventClass\n{\n    private socket : WebSocket | null = null;\n\n    constructor()\n    {\n        super(\n            'data',\n            'close',\n            'binary'\n        );\n    }\n\n    public connect(ip : string) : void\n    {\n        this.socket = new WebSocket('ws://' + ip);\n\n        this.socket.addEventListener('message', (event : MessageEvent) =>\n        {\n            if (typeof(event.data) === \"string\") {\n                let obj : SocketDataObject = JSON.parse(event.data);\n                this.emitEvent('data', obj.command, obj.data);\n            } else {\n                this.emitEvent('data', 'binary', event.data);\n            }\n        });\n\n        this.socket.addEventListener('close', () =>\n        {\n            this.emitEvent('close');\n        });\n\n        this.socket.addEventListener('error', () =>\n        {\n            this.emitEvent('close');\n        });\n    }\n\n    public write(command : string, data : any = null)\n    {\n        if (this.socket)\n        {\n            let toSend =\n            {\n                command: command,\n                data: data\n            };\n    \n            this.socket.send(JSON.stringify(toSend));\n        }\n    }\n}","/**\n * A class to represent a two-dimensional point in space, or something that would benefit from a similar treatment.\n *\n * Any functions that are said to return a copy do not modify the original point.\n *\n * Any operations such as [[times]] that act on two points will perform their operations element-wise. So, in the example of [[times]], the x-coordinates will be multiplied together and the y-coordinates will be multiplied together.\n */\nexport class Point\n{\n    /** The x-coordinate of the point. */\n    public x : number;\n\n    /** The y-coordinate of the point. */\n    public y : number;\n\n    /**\n     * Creates a new Point.\n     * @param x The x-coordinate of the point. If not defined, both x and y will be set to 0.\n     * @param y The y-coordinate of the point. If not defined, the x value will be used in its place.\n     */\n    constructor(x? : number, y? : number)\n    {\n        if (x === undefined)\n        {\n            this.x = 0;\n            this.y = 0;\n        }\n        else if (y === undefined)\n        {\n            this.x = x;\n            this.y = x;\n        }\n        else\n        {\n            this.x = x;\n            this.y = y;\n        }\n    }\n    \n    public static fromSizeLike(sizeLike : { width : number, height : number}) : Point\n    {\n        return new Point(sizeLike.width, sizeLike.height);\n    }\n    \n    public static fromPointLike(pointLike : { x : number, y : number}) : Point\n    {\n        return new Point(pointLike.x, pointLike.y);\n    }\n\n    /**\n     * @returns A copy of the point with y set to 0.\n     */\n    public get xOnly() : Point\n    {\n        return new Point(this.x, 0);\n    }\n\n    /**\n     * @returns A copy of the point with x set to 0.\n     */\n    public get yOnly() : Point\n    {\n        return new Point(0, this.y);\n    }\n\n    /**\n     * @returns A copy of the point scaled so that the magnitude of its x-coordinate is 1.\n     */\n    public get unitX() : Point\n    {\n        return new Point(this.x > 0 ? 1 : -1, this.y / this.x);\n    }\n\n    /**\n     * @returns A copy of the point scaled so that the magnitude of its y-coordinate is 1.\n     */\n    public get unitY() : Point\n    {\n        return new Point(this.x / this.y, this.y > 0 ? 1 : -1);\n    }\n\n    /**\n     * @returns A copy of the point with both coordinates inverted (multiplied by -1).\n     */\n    public get inverted() : Point\n    {\n        return this.times(-1);\n    }\n\n    /**\n     * @param x The magnitude of the horizontal scaling.\n     * @returns A copy of the point, inverted and scaled so that the magnitude of its x-coordinate is the passed value.\n     */\n    public reverseByX(x : number) : void\n    {\n        let offset = this.unitX.inverted.times(x);\n        this.x = offset.x;\n        this.y = offset.y;\n    }\n\n    /**\n     * @param x The magnitude of the vertical scaling.\n     * @returns A copy of the point, inverted and scaled so that the magnitude of its y-coordinate is the passed value.\n     */\n    public reverseByY(y : number) : void\n    {\n        let offset = this.unitY.inverted.times(y);\n        this.x = offset.x;\n        this.y = offset.y;\n    }\n\n    /**\n     * @param array The array from which to construct the point. Should be in the format [ x, y ]. Any elements beyond the second will be ignored.\n     * @returns A new point, the constructor called using the array as an argument list.\n     */\n    public static fromArray(array : number[]) : Point\n    {\n        return new Point(...array);\n    }\n\n    /**\n     * Used to generate a point from an index within a rectangular shape and the width of that rectangle. Like translating a tile index to a tile location.\n     * @param index The 0-based index to translate into a point.\n     * @param width The width of the rectangle.\n     */\n    public static fromIndex(index : number, width : number) : Point\n    {\n        return new Point(index % width, ~~(index / width));\n    }\n\n    /**\n     * @param p The point with which to test equality.\n     * @returns Whether or not the two points have equal x and y values.\n     */\n    public equals(p : Point) : boolean\n    {\n        return this.x === p.x && this.y === p.y;\n    }\n\n    /**\n     * @returns A copy of the point.\n     */\n    public copy() : Point\n    {\n        return new Point(this.x, this.y);\n    }\n\n    /**\n     * Modifies the point so that its coordinates are rounded to the nearest integer using Math.round.\n     */\n    public round() : void\n    {\n        this.x = Math.round(this.x);\n        this.y = Math.round(this.y);\n    }\n\n    /**\n     * @returns A copy of the point with its coordinates rounded via Math.round.\n     */\n    public get rounded() : Point\n    {\n        return new Point(Math.round(this.x), Math.round(this.y));\n    }\n\n    /**\n     * @param n A number or other point by which to multiply the point.\n     * @returns A copy of the point multiplied by the given value.\n     */\n    public times(n : number | Point) : Point\n    {\n        let ret = this.copy();\n        ret.multiply(n);\n        return ret;\n    }\n\n    /**\n     * Multiplies the point by the given value.\n     * @param n A number or other point by which to multiply the point.\n     */\n    public multiply(n : number | Point) : void\n    {\n        if (n instanceof Point)\n        {\n            this.x *= n.x;\n            this.y *= n.y;\n        }\n        else\n        {\n            this.x *= n;\n            this.y *= n;\n        }\n    }\n\n    /**\n     * @param n A number or other point by which to divide the point.\n     * @returns A copy of the point divided by the given value.\n     */\n    public dividedBy(n : number | Point) : Point\n    {\n        let ret = this.copy();\n        ret.divideBy(n);\n        return ret;\n    }\n\n    /**\n     * Divides the point by the given value.\n     * @param n A number or other point by which to divide the point.\n     */\n    public divideBy(n : number | Point) : void\n    {\n        if (n instanceof Point)\n        {\n            this.x /= n.x;\n            this.y /= n.y;\n        }\n        else\n        {\n            this.x /= n;\n            this.y /= n;\n        }\n    }\n\n    /**\n     * @param n A number or other point to be added to the point.\n     * @returns A copy of the point summed with the given value.\n     */\n    public plus(n : number | Point) : Point\n    {\n        let ret = this.copy();\n        ret.add(n);\n        return ret;\n    }\n    \n    /**\n     * Adds the given point to this point.\n     * @param n A number or other point to be added to this point.\n     */\n    public add(n : number | Point) : void\n    {\n        if (n instanceof Point)\n        {\n            this.x += n.x;\n            this.y += n.y;\n        }\n        else\n        {\n            this.x += n;\n            this.y += n;\n        }\n    }\n\n    /**\n     * @param n A number or other point to be subtracted from the point.\n     * @returns A copy of the difference between this point and the given point.\n     */\n    public minus(n : number | Point) : Point\n    {\n        let ret = this.copy();\n        ret.subtract(n);\n        return ret;\n    }\n\n    /**\n     * Subtracts the given point from this point.\n     * @param n A number or other point to be subtracted from this point.\n     */\n    public subtract(n : number | Point) : void\n    {\n        if (n instanceof Point)\n        {\n            this.x -= n.x;\n            this.y -= n.y;\n        }\n        else\n        {\n            this.x -= n;\n            this.y -= n;\n        }\n    }\n\n    /**\n     * @returns A copy of this point with its coordinates multiplied by themselves.\n     */\n    public get squared() : Point\n    {\n        return this.times(this);\n    }\n\n    /**\n     * @returns The sum of the point's two coordinates.\n     */\n    public get sum() : number\n    {\n        return this.x + this.y;\n    }\n\n    /**\n     * @returns A copy of the point with the coordinates both being made positive.\n     */\n    public get abs() : Point\n    {\n        return new Point(Math.abs(this.x), Math.abs(this.y));\n    }\n\n    /**\n     * @returns The smaller of the point's two coordinates.\n     */\n    public get min() : number\n    {\n        return Math.min(this.x, this.y);\n    }\n\n    /**\n     * @returns The larger of the point's two coordinates.\n     */\n    public get max() : number\n    {\n        return Math.max(this.x, this.y);\n    }\n\n    /**\n     * @param p The point to get the distance to.\n     * @returns The distance between this and the given point.\n     */\n    public distanceTo(p : Point) : number\n    {\n        return Math.sqrt(this.minus(p).squared.sum);\n    }\n\n    /**\n     * @returns A string in the format (x, y).\n     */\n    public toString() : string\n    {\n        return \"(\" + this.x + \", \" + this.y + \")\";\n    }\n\n    /**\n     * @returns A length-2 array of the form [ x, y ].\n     */\n    public toArray() : number[]\n    {\n        return [ this.x, this.y ];\n    }\n}","import { Point } from \"./point\";\n\nexport type RectAnchor = \"ne\" | \"nw\" | \"se\" | \"sw\";\n\nexport class Rectangle\n{\n    public position : Point;\n    public size : Point;\n\n    constructor(position : Point, size : Point)\n    {\n        this.position = position;\n        this.size = size;\n    }\n\n    public get isSquare() : boolean\n    {\n        return this.width === this.height;\n    }\n\n    public plus(operand : Rectangle) : Rectangle\n    {\n        return new Rectangle(this.position.plus(operand.position), this.size.plus(operand.size));\n    }\n\n    public times(operand : Rectangle | number) : Rectangle\n    {\n        if (typeof(operand) === \"number\")\n        {\n            return new Rectangle(this.position.times(operand), this.size.times(operand));\n        }\n        else\n        {\n            return new Rectangle(this.position.times(operand.position), this.size.times(operand.size));\n        }\n    }\n\n    public translated(offset : Point) : Rectangle\n    {\n        return new Rectangle(this.position.plus(offset), this.size.copy());\n    }\n\n    public toString() : string\n    {\n        return \"(\" + this.x + \", \" + this.y + \", \" + this.width + \", \" + this.height + \")\";\n    }\n\n    public fitInside(rect : Rectangle, anchor : RectAnchor) : void\n    {\n        let ar = rect.aspectRatio;\n        let startPoint = this.getPointFromAnchor(anchor).copy();\n\n        if (ar > this.aspectRatio)\n        {\n            // wider //\n            this.width *= rect.height / this.height;\n            this.height = rect.height;\n        }\n        else\n        {\n            // taller //\n            this.height *= rect.width / this.width;\n            this.width = rect.width;\n        }\n\n        this.setPointFromAnchor(anchor, startPoint);\n    }\n\n    public setWidthKeepAR(width : number) : void\n    {\n        let ar = this.width / width;\n        this.width = width;\n        this.height = this.height / ar;\n    }\n\n    public setHeightKeepAR(height : number) : void\n    {\n        let ar = this.height / height;\n        this.height = height;\n        this.width = this.width / ar;\n    }\n\n    public expandToward(anchor : RectAnchor, factor : number) : void\n    {\n        switch (anchor)\n        {\n            case \"ne\":\n                let bl = this.bottomLeft;\n                this.size.multiply(factor);\n                this.bottomLeft = bl;\n                break;\n            case \"nw\":\n                let br = this.bottomRight;\n                this.size.multiply(factor);\n                this.bottomRight = br;\n                break;\n            case \"se\":\n                let tl = this.topLeft;\n                this.size.multiply(factor);\n                this.topLeft = tl;\n                break;\n            case \"sw\":\n                let tr = this.topRight;\n                this.size.multiply(factor);\n                this.topRight = tr;\n                break;\n        }\n    }\n\n    public fitInsideGreedyCenter(rect : Rectangle, boundingRect : Rectangle)\n    {\n        let ar = rect.aspectRatio;\n        let center = this.center.copy(); // just being careful\n\n        if (ar > 1)\n        {\n            // wider //\n            this.height *= rect.width / this.width;\n            this.width = rect.width;\n        }\n        else\n        {\n            // taller //\n            this.width *= rect.height / this.height;\n            this.height = rect.height;\n        }\n\n        this.center = center;\n\n        if (!boundingRect.containsRect(this))\n        {\n            if (this.right > boundingRect.right)\n            {\n                this.setWidthKeepAR((boundingRect.right - center.x) * 2);\n                this.center = center;\n            }\n            if (this.bottom > boundingRect.bottom)\n            {\n                this.setHeightKeepAR((boundingRect.bottom - center.y) * 2);\n                this.center = center;\n            }\n            if (this.left < boundingRect.left)\n            {\n                this.setWidthKeepAR((center.x - boundingRect.left) * 2);\n                this.center = center;\n            }\n            if (this.top < boundingRect.top)\n            {\n                this.setHeightKeepAR((center.y - boundingRect.top) * 2);\n                this.center = center;\n            }\n        }\n    }\n\n    public fitInsideGreedy(rect : Rectangle, anchor : RectAnchor, boundingRect : Rectangle) : void\n    {\n        let ar = rect.aspectRatio;\n        let startPoint = this.getPointFromAnchor(anchor).copy();\n\n        if (ar > 1)\n        {\n            // wider //\n            this.height *= rect.width / this.width;\n            this.width = rect.width;\n        }\n        else\n        {\n            // taller //\n            this.width *= rect.height / this.height;\n            this.height = rect.height;\n        }\n\n        this.setPointFromAnchor(anchor, startPoint);\n\n        if (!boundingRect.containsRect(this))\n        {\n            if (this.right > boundingRect.right)\n            {\n                this.setWidthKeepAR(boundingRect.right - this.left);\n                this.setPointFromAnchor(anchor, startPoint);\n            }\n            if (this.bottom > boundingRect.bottom)\n            {\n                this.setHeightKeepAR(boundingRect.bottom - this.top);\n                this.setPointFromAnchor(anchor, startPoint);\n            }\n            if (this.left < boundingRect.left)\n            {\n                this.setWidthKeepAR(this.right - boundingRect.left);\n                this.setPointFromAnchor(anchor, startPoint);\n            }\n            if (this.top < boundingRect.top)\n            {\n                this.setHeightKeepAR(this.bottom - boundingRect.top);\n                this.setPointFromAnchor(anchor, startPoint);\n            }\n        }\n    }\n\n    public copy() : Rectangle\n    {\n        return new Rectangle(this.position.copy(), this.size.copy());\n    }\n\n    public mirror(r : Rectangle) : void\n    {\n        this.position = r.position;\n        this.size = r.size;\n    }\n\n    public getPointFromAnchor(anchor : RectAnchor)\n    {\n        switch (anchor)\n        {\n            case \"nw\": return this.topLeft;\n            case \"ne\": return this.topRight;\n            case \"sw\": return this.bottomLeft;\n            case \"se\": return this.bottomRight;\n        }\n    }\n\n    public setPointFromAnchor(anchor : RectAnchor, point : Point)\n    {\n        switch (anchor)\n        {\n            case \"nw\": this.topLeft = point; break;\n            case \"ne\": this.topRight = point; break;\n            case \"sw\": this.bottomLeft = point; break;\n            case \"se\": this.bottomRight = point; break;\n        }\n    }\n\n    public static anchorOpposite(anchor : RectAnchor) : RectAnchor\n    {\n        switch (anchor)\n        {\n            case \"nw\": return \"se\";\n            case \"ne\": return \"sw\";\n            case \"sw\": return \"ne\";\n            case \"se\": return \"nw\";\n        }\n    }\n\n    public get aspectRatio() : number\n    {\n        return this.width / this.height;\n    }\n\n    public round(aboutCenter : boolean = false) : void\n    {\n        if (aboutCenter)\n        {\n            let c = this.center;\n            this.size.round();\n            this.center = c.rounded;\n        }\n        else\n        {\n            this.position.round();\n            this.size.round();\n        }\n    }\n\n    public get rounded() : Rectangle\n    {\n        return new Rectangle(this.position.rounded, this.size.rounded);\n    }\n\n    public get local() : Rectangle\n    {\n        return new Rectangle(new Point(0), this.size.copy());\n    }\n    \n    public get x() : number\n    {\n        return this.position.x;\n    }\n\n    public set x(x : number)\n    {\n        this.position.x = x;\n    }\n\n    public get y() : number\n    {\n        return this.position.y;\n    }\n\n    public set y(y : number)\n    {\n        this.position.y = y;\n    }\n    \n    public get left() : number\n    {\n        return this.position.x;\n    }\n\n    public set left(left : number)\n    {\n        this.position.x = left;\n    }\n\n    public get top() : number\n    {\n        return this.position.y;\n    }\n\n    public set top(top : number)\n    {\n        this.position.y = top;\n    }\n\n    public get width() : number\n    {\n        return this.size.x;\n    }\n\n    public set width(width : number)\n    {\n        this.size.x = width;\n    }\n\n    public get height() : number\n    {\n        return this.size.y;\n    }\n\n    public set height(height : number)\n    {\n        this.size.y = height;\n    }\n\n    public get right() : number\n    {\n        return this.x + this.width;\n    }\n\n    public set right(right : number)\n    {\n        this.x = right - this.width;\n    }\n\n    public get bottom() : number\n    {\n        return this.y + this.height;\n    }\n\n    public set bottom(bottom : number)\n    {\n        this.y = bottom - this.height;\n    }\n\n    public get topLeft() : Point\n    {\n        return this.position;\n    }\n\n    public set topLeft(topLeft : Point)\n    {\n        this.position = topLeft;\n    }\n\n    public get topRight() : Point\n    {\n        return this.position.plus(new Point(this.width, 0));\n    }\n\n    public set topRight(topRight : Point)\n    {\n        this.position = topRight.minus(new Point(this.width, 0));\n    }\n\n    public get bottomLeft() : Point\n    {\n        return this.position.plus(new Point(0, this.height));\n    }\n\n    public set bottomLeft(bottomLeft : Point)\n    {\n        this.position = bottomLeft.minus(new Point(0, this.height));\n    }\n\n    public get bottomRight() : Point\n    {\n        return this.position.plus(this.size);\n    }\n\n    public set bottomRight(bottomRight : Point)\n    {\n        this.position = bottomRight.minus(this.size);\n    }\n\n    public get center() : Point\n    {\n        return this.position.plus(this.size.times(1/2));\n    }\n\n    public set center(center : Point)\n    {\n        this.position = center.minus(this.size.times(1/2));\n    }\n\n    public get cx() : number\n    {\n        return this.center.x;\n    }\n\n    public set cx(cx : number)\n    {\n        this.position.x = cx - this.size.x / 2;\n    }\n\n    public get cy() : number\n    {\n        return this.center.y;\n    }\n\n    public set cy(cy : number)\n    {\n        this.position.y = cy - this.size.y / 2;\n    }\n\n    public containsPoint(p : Point) : boolean\n    {\n        return (\n            p.x >= this.x && p.x <= this.right &&\n            p.y >= this.y && p.y <= this.bottom\n        );\n    }\n\n    public containsRect(r : Rectangle) : boolean\n    {\n        return this.containsPoint(r.topLeft) && this.containsPoint(r.bottomRight);\n    }\n\n    /**\n     * @param r Rectangle to test for intersection with this one.\n     * @returns Whether or not the rectangles intersect. If they are just touching, will return `false`.\n     */\n    public intersects(r : Rectangle) : boolean\n    {\n        return !(r.left >= this.right || \n            r.right <= this.left || \n            r.top >= this.bottom ||\n            r.bottom <= this.top)\n    }\n\n    public overlapPercentage(r : Rectangle) : number\n    {\n        let area = this.overlapArea(r);\n        let union = this.area + r.area - area;\n        return area / union;\n    }\n\n    public overlapArea(r : Rectangle) : number\n    {\n        let left = Math.max(this.left, r.left);\n        let top = Math.max(this.top, r.top);\n        let bottom = Math.min(this.bottom, r.bottom);\n        let right = Math.min(this.right, r.right);\n\n        let width = right - left;\n        let height = bottom - top;\n        let area = width * height;\n\n        return area;\n    }\n\n    public get area() : number\n    {\n        return this.size.x * this.size.y;\n    }\n    \n    public static between(p1 : Point, p2 : Point) : Rectangle\n    {\n        let pos = new Point(Math.min(p1.x, p2.x), Math.min(p1.y, p2.y));\n        let size = new Point(Math.abs(p1.x - p2.x), Math.abs(p1.y - p2.y));\n        return new Rectangle(pos, size);\n    }\n}","import { Point } from \"./point\";\nimport { array_contains } from \"./util\";\nimport { Rectangle } from \"./rectangle\";\n\ntype CanvasOptions =\n{\n    canvasElement? : HTMLCanvasElement,\n    size? : Point,\n    align? :\n    {\n        horizontal : boolean,\n        vertical : boolean\n    },\n    deepCalc? : boolean,\n    pixelated? : boolean,\n    opaque? : boolean\n};\n\ntype CanvasTextBaseline = \"top\" | \"hanging\" | \"middle\" | \"alphabetic\" | \"ideographic\" | \"bottom\";\ntype CanvasTextAlign = \"start\" | \"end\" | \"left\" | \"right\" | \"center\";\n\ntype MouseMoveFn = (pos : Point, isDown : boolean, lastPos : Point, originalPos : Point, e : MouseEvent | TouchEvent) => any;\ntype MouseDownFn = (pos : Point, e : MouseEvent | TouchEvent) => any;\ntype MouseUpFn = (pos : Point, originalPos : Point, e : MouseEvent | TouchEvent) => any;\ntype MouseLeaveFn = (pos : Point, e : MouseEvent | TouchEvent) => any;\n\ntype Drawable = HTMLImageElement | Canvas | HTMLCanvasElement;\n\ntype CanvasMouse =\n{\n    isDown: boolean,\n    lastPos: Point | null,\n    originalPos: Point,\n    events:\n    {\n        move: MouseMoveFn[],\n        down: MouseDownFn[],\n        up: MouseUpFn[],\n        leave: MouseLeaveFn[]\n    }\n};\n\nexport class Canvas\n{\n    canvas : HTMLCanvasElement;\n    translation : Point;\n    align : { horizontal: boolean, vertical: boolean };\n    usingDeepCalc : boolean;\n    mouse : CanvasMouse;\n    offset : Point = new Point(0);\n    public readonly context : CanvasRenderingContext2D;\n\n    constructor(options : CanvasOptions = {})\n    {\n        options = options || {}\n\n        if (!options.canvasElement)\n        {\n            options.canvasElement = document.createElement(\"canvas\");\n        }\n        else if (typeof(options.canvasElement) === \"string\")\n        {\n            options.canvasElement = document.querySelector(options.canvasElement) || undefined;\n        }\n\n        this.canvas = options.canvasElement as HTMLCanvasElement;\n        this.context = this.canvas.getContext(\"2d\", { alpha: !options.opaque }) as CanvasRenderingContext2D;\n        \n        if (options.size)\n        {\n            this.resize(options.size, false);\n        }\n\n        this.translation = new Point(0);\n\n        this.align =\n        {\n            horizontal: (options.align && options.align.horizontal) || false,\n            vertical: (options.align && options.align.vertical) || false\n        }\n\n        if (this.align.horizontal || this.align.vertical)\n        {\n            //this.canvas.style.transformOrigin = \"center\";\n            //this.canvas.style.position = \"absolute\";\n\n            /*if (this.align.horizontal && this.align.vertical)\n            {\n                this.canvas.style.transform = \"translate(-50%, -50%)\";\n                this.canvas.style.left = \"50%\";\n                this.canvas.style.top = \"50%\";\n            }\n            else if (this.align.horizontal)\n            {\n                this.canvas.style.transform = \"translateX(-50%)\";\n                this.canvas.style.left = \"50%\";\n            }\n            else // vertical\n            {\n                this.canvas.style.transform = \"translateY(-50%)\";\n                this.canvas.style.top = \"50%\";\n            }*/\n        }\n        else\n        {\n            this.canvas.style.transformOrigin = \"top left\";\n        }\n\n        this.usingDeepCalc = options.deepCalc || false;\n        this.pixelated = options.pixelated || false;\n\n        if (this.usingDeepCalc)\n        {\n            this.deepCalcPosition();\n            window.addEventListener(\"resize\", this.deepCalcPosition);\n        }\n\n        this.mouse =\n        {\n            isDown: false,\n            lastPos: null,\n            originalPos: new Point(-1),\n            events:\n            {\n                move: [],\n                down: [],\n                up: [],\n                leave: []\n            }\n        };\n\n        this.canvas.addEventListener(\"mousemove\", this.mouseMove.bind(this));\n        this.canvas.addEventListener(\"touchmove\", this.mouseMove.bind(this));\n        this.canvas.addEventListener(\"mousedown\", this.mouseDown.bind(this));\n        this.canvas.addEventListener(\"touchstart\", this.mouseDown.bind(this));\n        this.canvas.addEventListener(\"mouseup\", this.mouseUp.bind(this));\n        this.canvas.addEventListener(\"touchend\", this.mouseUp.bind(this));\n        this.canvas.addEventListener(\"mouseleave\", this.mouseLeave.bind(this));\n        this.canvas.addEventListener(\"touchcancel\", this.mouseLeave.bind(this));\n    }\n\n    public addEventListener(eventName : \"mouseup\", fn : MouseUpFn) : void;\n    public addEventListener(eventName : \"mousedown\", fn : MouseDownFn) : void;\n    public addEventListener(eventName : \"mousemove\", fn : MouseMoveFn) : void;\n    public addEventListener(eventName : \"mouseleave\", fn : MouseLeaveFn) : void;\n    public addEventListener(eventName : string, fn : Function) : void\n    {\n        if (array_contains([\"mouseup\",\"mousedown\",\"mousemove\",\"mouseleave\"], eventName))\n        {\n            (this.mouse.events as any)[eventName.substr(5)].push(fn);\n        }\n    }\n\n    public resize(size : Point, redraw : boolean)\n    {\n        let c : HTMLCanvasElement | null = null;\n\n        if (redraw)\n        {\n            c = this.canvas.cloneNode() as HTMLCanvasElement;\n        }\n        \n        this.canvas.width = size.x;\n        this.canvas.height = size.y;\n\n        if (redraw)\n        {\n            this.drawImage(c as HTMLCanvasElement, new Point(0));\n        }\n    }\n\n    public zoom(amount : number | Point)\n    {\n        let x : number;\n        let y : number;\n\n        if (typeof(amount) === \"number\")\n        {\n            x = amount;\n            y = amount;\n        }\n        else\n        {\n            x = amount.x;\n            y = amount.y;\n        }\n\n        this.canvas.style[\"transform\"] = \"scale(\" + x + \", \" + y + \")\";\n    }\n\n    public zoomToFit(size : Point)\n    {\n        let wRatio = size.x / this.width;\n        let hRatio = size.y / this.height;\n\n        if (wRatio < hRatio)\n        {\n            this.zoom(wRatio);\n        }\n        else\n        {\n            this.zoom(hRatio);\n        }\n    }\n\n    public scale(amount : number | Point)\n    {\n        return this.zoom(amount);\n    }\n\n    public clear()\n    {\n        this.context.clearRect(-this.translation.x, -this.translation.y, this.canvas.width, this.canvas.height);  \n    }\n\n    private deepCalcPosition()\n    {\n        let z = this.canvas as HTMLElement, x = 0, y = 0, c; \n\n        while(z && !isNaN(z.offsetLeft) && !isNaN(z.offsetTop)) {        \n            c =  window.getComputedStyle(z, null); \n            x += z.offsetLeft - z.scrollLeft + (c ? parseInt(c.getPropertyValue('border-left-width') , 10) : 0);\n            y += z.offsetTop - z.scrollTop + (c ? parseInt(c.getPropertyValue('border-top-width') , 10) : 0);\n            z = z.offsetParent as HTMLElement;\n        }\n\n        this.offset = new Point(x, y);\n    }\n\n    private posFromEvent(e : MouseEvent | TouchEvent) : Point\n    {\n        let ret = new Point();\n\n        if (e instanceof MouseEvent)\n        {\n            ret = new Point(e.clientX, e.clientY);\n        }\n        else\n        {\n            ret = new Point(e.changedTouches[0].clientX, e.changedTouches[0].clientY);\n        }\n\n        if (this.usingDeepCalc)\n        {\n            this.deepCalcPosition();\n        }\n\n        let bounds = this.canvas.getBoundingClientRect();\n\n        let o = this.usingDeepCalc ? this.offset.copy() : new Point(bounds.left, bounds.top);\n\n        if (this.align.horizontal && o.x > 0)\n        {\n            o.x = (2 * o.x - bounds.width) / 2;\n        }\n\n        if (this.align.vertical && o.y > 0)\n        {\n            o.y = (2 * o.y - bounds.height) / 2;\n        }\n        \n        ret.subtract(o);\n        ret.multiply(this.size.dividedBy(new Point(bounds.width, bounds.height)));\n        \n        return ret;\n    }\n\n    public get size() : Point\n    {\n        return new Point(this.canvas.width, this.canvas.height);\n    }\n\n    private mouseMove(e : MouseEvent | TouchEvent) : void\n    {\n        let pos = this.posFromEvent(e);\n        if (!this.mouse.lastPos) this.mouse.lastPos = pos;\n        if (!this.mouse.isDown) this.mouse.originalPos = pos;\n\n        this.mouse.events.move.forEach(fn =>\n        {\n            let event = fn.call(\n                this,\n                pos,\n                this.mouse.isDown,\n                this.mouse.lastPos as Point,\n                this.mouse.originalPos,\n                e\n            );\n\n            if (event !== false)\n            {\n                this.mouse.lastPos = pos;\n            }\n        });\n    }\n\n    private mouseDown(e : MouseEvent | TouchEvent) : void\n    {\n        let pos = this.posFromEvent(e);\n        this.mouse.isDown = true;\n        this.mouse.lastPos = pos;\n        this.mouse.originalPos = pos;\n\n        this.mouse.events.down.forEach(fn =>\n        {\n            fn.call(this, pos, e);\n        });\n    }\n\n    private mouseUp(e : MouseEvent | TouchEvent) : void\n    {\n        let pos = this.posFromEvent(e);\n        this.mouse.isDown = false;\n\n        this.mouse.events.up.forEach(fn =>\n        {\n            fn.call(this, pos, this.mouse.originalPos, e);\n        });\n\n        this.mouse.lastPos = pos;\n    }\n\n    private mouseLeave(e : MouseEvent | TouchEvent) : void\n    {\n        let pos = this.posFromEvent(e);\n\n        this.mouse.events.leave.forEach(fn =>\n        {\n            fn.call(this, pos, e);\n        });\n    }\n\n    public set pixelated(bool : boolean)\n    {\n        bool = !bool;\n\n        let ctx = this.context;\n        (ctx as any).mozImageSmoothingEnabled = bool;\n        (ctx as any).webkitImageSmoothingEnabled = bool;\n        //(ctx as any).msImageSmoothingEnabled = bool;\n        (ctx as any).imageSmoothingEnabled = bool;\n\n        if (!bool)\n        {\n            let types = [ \"optimizeSpeed\", \"crisp-edges\", \"-moz-crisp-edges\", \"-webkit-optimize-contrast\", \"optimize-contrast\", \"pixelated\" ];\n            \n            types.forEach(type => this.canvas.style.imageRendering = type);\n        }\n        else\n        {\n            this.canvas.style.imageRendering = \"\";\n        }\n        //this.canvas.style.msInterpolationMode = \"nearest-neighbor\";\n    }\n\n    public get width() : number { return this.canvas.width; }\n    public get height() : number { return this.canvas.height; }\n\n    public get opacity() : number { return this.context.globalAlpha; }\n    public set opacity(opacity : number) { this.context.globalAlpha = opacity; }\n\n    public get color() : string { return this.context.fillStyle as string; }\n    public set color(val : string)\n    {\n        if (val === undefined) return;\n\n        this.context.fillStyle = val;\n        this.context.strokeStyle = val;\n    }\n\n    public get font() : string { return this.context.font; }\n    public set font(val : string)\n    {\n        if (val === undefined) return;\n\n        this.context.font = val;\n    }\n\n    public get lineWidth() : number { return this.context.lineWidth; }\n    public set lineWidth(val : number)\n    {\n        if (val === undefined) return;\n        \n        this.context.lineWidth = val;\n    }\n\n    public get blendMode() : string { return this.context.globalCompositeOperation; }\n    public set blendMode(val : string) { this.context.globalCompositeOperation = val; }\n\n    public get lineDash() : number[] { return this.context.getLineDash(); }\n    public set lineDash(dash : number[]) { this.context.setLineDash(dash); }\n\n    public createBlob(callback : (blob : Blob) => any, mimeType? : string) : void\n    {\n        this.canvas.toBlob(function(blob)\n        {\n            callback(blob as Blob);\n        }, mimeType);\n    }\n\n    public createImage(callback : (image : HTMLImageElement) => any, mimeType? : string, autoRevoke : boolean = true)\n    {\n        this.canvas.toBlob(function(blob) {\n            let ret = new Image();\n    \n            ret.onload = () =>\n            {\n                callback(ret);\n                ret.onload = null;\n                autoRevoke && URL.revokeObjectURL(ret.src);\n            };\n        \n            let url = URL.createObjectURL(blob);\n            ret.src = url;\n        }, mimeType);\n    }\n\n    public get imageData() : ImageData\n    {\n        return this.context.getImageData(0, 0, this.width, this.height);\n    }\n\n    public drawImage(image : Drawable, position : Point | Rectangle) : void\n    {\n        if (image instanceof Canvas)\n        {\n            image = image.canvas;\n        }\n\n        if (position instanceof Point)\n        {\n            this.context.drawImage(image, position.x, position.y);\n        }\n        else\n        {\n            this.context.drawImage(image, position.x, position.y, position.width, position.height);\n        }        \n    }\n\n    public drawCroppedImage(image : Drawable, position : Point | Rectangle, cropRegion : Rectangle) : void\n    {\n        if (image instanceof Canvas)\n        {\n            image = image.canvas;\n        }\n\n        if (position instanceof Point)\n        {\n            this.context.drawImage(image, cropRegion.x, cropRegion.y, cropRegion.width, cropRegion.height, position.x, position.y, cropRegion.width, cropRegion.height);\n        }\n        else\n        {\n            this.context.drawImage(image, cropRegion.x, cropRegion.y, cropRegion.width, cropRegion.height, position.x, position.y, position.width, position.height);\n        }\n    }\n    \n    public drawRotatedCroppedImage(image : Drawable, rotate : number, anchor : Point, position : Point | Rectangle, cropRegion : Rectangle) : void\n    {\n        if (image instanceof Canvas)\n        {\n            image = image.canvas;\n        }\n    \n        var ctx = this.context;\n    \n        ctx.save();\n        ctx.translate(position.x + anchor.x, position.y + anchor.y);\n        ctx.rotate(rotate);\n\n        if (position instanceof Point)\n        {\n            ctx.drawImage(image, cropRegion.x, cropRegion.y, cropRegion.width, cropRegion.height, -anchor.x, -anchor.y, image.width, image.height);\n        }\n        else\n        {\n            ctx.drawImage(image, cropRegion.x, cropRegion.y, cropRegion.width, cropRegion.height, -anchor.x, -anchor.y, position.width, position.height);\n        }\n\n        ctx.restore();\n    }\n\n    public fillWithImage(image : Drawable, resizeCanvasToFit : boolean) : void\n    {\n        if (resizeCanvasToFit)\n        {\n            this.resize(new Point(image.width, image.height), false);\n        }\n        \n        this.drawImage(image, new Point(0));\n    }\n\n    public drawLine(start : Point, end : Point, color? : string, lineWidth? : number) : void\n    {\n        if (color) this.color = color;\n        if (lineWidth) this.lineWidth = lineWidth;\n    \n        this.context.beginPath();\n        this.context.moveTo(start.x, start.y);\n        this.context.lineTo(end.x, end.y);\n        this.context.stroke();\n    }\n\n    public drawRect(rect : Rectangle, color : string, lineWidth : number, sharp : boolean = true) : void\n    {\n        this.color = color;\n        this.lineWidth = lineWidth;\n\n        if (sharp)\n        {\n            rect = rect.translated(new Point(0.5));\n        }\n\n        this.context.strokeRect(rect.x, rect.y, rect.width, rect.height);\n    }\n\n    public fillRect(rect : Rectangle, color : string) : void\n    {\n        this.color = color;\n\n        this.context.fillRect(rect.x, rect.y, rect.width, rect.height);\n    }\n\n    // https://stackoverflow.com/a/7838871\n    public drawRoundedRect(rect : Rectangle, radius : number, color : string, lineWidth : number, sharp : boolean = true) : void\n    {\n        this.color = color;\n        this.lineWidth = lineWidth;\n\n        if (sharp)\n        {\n            rect = rect.translated(new Point(0.5));\n        }\n\n        if (rect.width < 2 * radius) radius = rect.width / 2;\n        if (rect.height < 2 * radius) radius = rect.height / 2;\n\n        this.context.beginPath();\n        this.context.moveTo(rect.x + radius, rect.y);\n        this.context.arcTo(rect.right, rect.y, rect.right, rect.bottom, radius);\n        this.context.arcTo(rect.right, rect.bottom, rect.x, rect.bottom, radius);\n        this.context.arcTo(rect.x, rect.bottom, rect.x, rect.y, radius);\n        this.context.arcTo(rect.x, rect.y, rect.right, rect.y, radius);\n        this.context.closePath();\n        this.context.stroke();\n    }\n\n    public fillRoundedRect(rect : Rectangle, radius : number, color : string, sharp : boolean = true) : void\n    {\n        this.color = color;\n\n        if (sharp)\n        {\n            rect = rect.translated(new Point(0.5));\n        }\n\n        if (rect.width < 2 * radius) radius = rect.width / 2;\n        if (rect.height < 2 * radius) radius = rect.height / 2;\n\n        this.context.beginPath();\n        this.context.moveTo(rect.x + radius, rect.y);\n        this.context.arcTo(rect.right, rect.y, rect.right, rect.bottom, radius);\n        this.context.arcTo(rect.right, rect.bottom, rect.x, rect.bottom, radius);\n        this.context.arcTo(rect.x, rect.bottom, rect.x, rect.y, radius);\n        this.context.arcTo(rect.x, rect.y, rect.right, rect.y, radius);\n        this.context.closePath();\n        this.context.fill();\n    }\n\n    public fill(color : string) : void\n    {\n        this.fillRect(new Rectangle(new Point(0), this.size), color);\n    }\n\n    public fillText(text : string, position : Point, color : string, baseline? : CanvasTextBaseline, align? : CanvasTextAlign, font? : string) : void\n    {\n        this.color = color;\n        \n        if (font)\n        {\n            this.font = font;\n        }\n        if (baseline)\n        {\n            this.context.textBaseline = baseline;\n        }\n        if (align)\n        {\n            this.context.textAlign = align;\n        }\n        \n        this.context.fillText(text, position.x, position.y);\n    }\n\n    public fillCircle(position : Point, radius : number, color : string) : void\n    {\n        this.color = color;\n\n        this.context.beginPath();\n        this.context.arc(position.x, position.y, radius, 0, 2 * Math.PI, false);\n        this.context.fill();\n    }\n\n    public fillCircleInSquare(position : Point, diameter : number, color : string)\n    {    \n        this.color = color;\n    \n        this.context.beginPath();\n        this.context.arc(position.x + diameter / 2, position.y + diameter / 2, diameter / 2, 0, 2 * Math.PI, false);\n        this.context.fill();\n    }\n\n    public drawCircleInSquare(position : Point, diameter : number, color : string, lineWidth : number) : void\n    {\n        this.color = color;\n        this.lineWidth = lineWidth;\n\n        this.context.beginPath();\n        this.context.arc(position.x + diameter / 2, position.y + diameter / 2, diameter / 2, 0, 2 * Math.PI, false);\n        this.context.stroke();\n    }\n\n    public fillCircleInRect(rect : Rectangle, color : string) : void\n    {\n        if (rect.isSquare)\n        {\n            return this.fillCircleInSquare(rect.position, rect.width, color);\n        }\n        \n        this.color = color;\n\n        this.context.beginPath();\n        this.context.ellipse(rect.x, rect.y, rect.width / 2, rect.height / 2, 0, 0, Math.PI * 2);\n        this.context.fill();\n    }\n\n    public drawCircleInRect(rect : Rectangle, color : string, lineWidth : number) : void\n    {\n        if (rect.isSquare)\n        {\n            return this.drawCircleInSquare(rect.position, rect.width, color, lineWidth);\n        }\n        \n        this.color = color;\n        this.lineWidth = lineWidth;\n\n        this.context.beginPath();\n        this.context.ellipse(rect.x, rect.y, rect.width / 2, rect.height / 2, 0, 0, Math.PI * 2);\n        this.context.stroke();\n    }\n\n    public drawRotatedImage(image : Drawable, rotate : number, position : Point | Rectangle) : void\n    {\n        if (image instanceof Canvas)\n        {\n            image = image.canvas;\n        }\n\n        let w : number;\n        let h : number;\n\n        if (position instanceof Point)\n        {\n            w = image.width;\n            h = image.height;\n        }\n        else\n        {\n            w = position.width;\n            h = position.height;\n        }\n        \n        this.context.save();\n        this.context.translate(position.x + w / 2, position.y + h / 2);\n        this.context.rotate(rotate);\n        this.context.drawImage(image, -w / 2, -h / 2, w, h);\n        this.context.restore();\n    }\n\n    public static fileToImage(file : File, callback : (image : HTMLImageElement) => any, autoRevoke : boolean = true)\n    {\n        let img = new Image();\n    \n        img.onload = () =>\n        {\n            callback(img);\n            if (autoRevoke)\n            {\n                window.URL.revokeObjectURL(img.src);\n            }\n        };\n    \n        img.src = window.URL.createObjectURL(file);\n    }\n}\n\n// from https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toBlob\nif (!HTMLCanvasElement.prototype.toBlob) {\n    Object.defineProperty(HTMLCanvasElement.prototype, 'toBlob', {\n        value: function (callback : any, type : any, quality : any) {\n            var canvas = this;\n            setTimeout(function() {\n                var binStr = atob( canvas.toDataURL(type, quality).split(',')[1] ),\n                    len = binStr.length,\n                    arr = new Uint8Array(len);\n\n                for (var i = 0; i < len; i++ ) {\n                arr[i] = binStr.charCodeAt(i);\n                }\n\n                callback(new Blob([arr], { type: type || 'image/png' }));\n            });\n        }\n    });\n}","import React from 'react';\n\ninterface Props {\n    color: string,\n    onChange: (color: string) => any\n}\n\ninterface State {\n}\n\nexport default class ColorCircle extends React.Component<Props, State> {\n    componentDidMount() {\n    }\n\n    handleChange(e: React.ChangeEvent<HTMLInputElement>) {\n        this.props.onChange(e.target.value);\n    }\n\n    render() {\n        return (\n            <div className='item'>\n                <label>\n                    <div\n                        className='fullSize'\n                        style={{\n                            backgroundColor: this.props.color\n                        }}\n                    />\n                    <input\n                        type='color'\n                        style={{\n                            display: 'none'\n                        }}\n                        onChange={this.handleChange.bind(this)}\n                        value={this.props.color}\n                    />\n                </label>\n            </div>\n        );\n    }\n}","import React from 'react';\n\ninterface Props {\n    onIncrement: () => any;\n    onDecrement: () => any;\n    onChange: (value: string) => any;\n    size: number;\n}\n\ninterface State {\n}\n\nexport default class SizeCircle extends React.Component<Props, State> {\n    componentDidMount() {\n    }\n\n    handleIncrement() {\n        this.props.onIncrement();\n    }\n\n    handleDecrement() {\n        this.props.onDecrement();\n    }\n\n    handleChange(e: React.ChangeEvent<HTMLInputElement>) {\n        this.props.onChange(e.target.value);\n    }\n\n    render() {\n        return (\n            <div className='item'>\n            <button\n                className='fullSize'\n                onClick={this.handleIncrement.bind(this)}\n            >\n                +\n            </button>\n            <input\n                value={this.props.size.toString()}\n                onChange={this.handleChange.bind(this)}\n            />\n            <button\n                className='fullSize'\n                onClick={this.handleDecrement.bind(this)}\n            >\n                -\n            </button>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport { ToolType } from './DrawingPage';\n\ninterface Props {\n    tool: ToolType;\n    onToggle: () => any;\n}\n\nexport default class ToolCircle extends React.Component<Props, {}> {\n    handleClick() {\n        this.props.onToggle();\n    }\n\n    render() {\n        let toolIcon: string = this.props.tool + '.png';\n\n        return (\n            <button\n                className='item fullSize'\n                style={{\n                    backgroundImage: 'url(' + toolIcon + ')'\n                }}\n                onClick={this.handleClick.bind(this)}\n            >\n            </button>\n        );\n    }\n}","import React from 'react';\nimport './DrawingPage.scss';\nimport { socket } from './App';\nimport { Canvas } from './canvas';\nimport { Point } from './point';\nimport ColorCircle from './ColorCircle';\nimport SizeCircle from './SizeCircle';\nimport ToolCircle from './ToolCircle';\n\nexport type ToolType = 'pencil' | 'eraser';\n\ninterface DotData {\n    pos: number[];\n    size: number;\n    color: string;\n}\n\ninterface LineData {\n    from: number[];\n    to: number[];\n    size: number;\n    color: string;\n}\n\ninterface EraseData {\n    from: number[];\n    to: number[];\n    size: number;\n}\n\ninterface State {\n    color: string,\n    size: number,\n    tool: ToolType\n}\n\ninterface Props {\n    size: number[]\n}\n\nexport default class DrawingPage extends React.Component<Props, State> {\n    state: State = {\n        color: 'black',\n        size: 5,\n        tool: 'pencil'\n    };\n\n    lastWrite = 0;\n    writeThrottle = 16;\n    _canvas: Canvas | null = null;\n\n    mouseDown(pos: Point) {\n        if (this.state.tool === 'pencil') {\n            const data : DotData = {\n                pos: pos.toArray(),\n                size: this.state.size,\n                color: this.state.color\n            };\n    \n            socket.write('dot', data);\n        }\n    }\n\n    mouseMove(pos: Point, lastPos: Point, mouseIsDown: boolean) {\n        if (mouseIsDown) {\n            const now = Date.now();\n            if (true || now - this.lastWrite >= this.writeThrottle) {\n                this.lastWrite = now;\n                \n                switch (this.state.tool) {\n                    case 'pencil': {\n                        const data : LineData = {\n                            from: lastPos.toArray(),\n                            to: pos.toArray(),\n                            size: this.state.size,\n                            color: this.state.color\n                        };\n            \n                        socket.write('line', data);\n                        break;\n                    }\n                    case 'eraser': {\n                        const data : EraseData = {\n                            from: lastPos.toArray(),\n                            to: pos.toArray(),\n                            size: this.state.size\n                        };\n            \n                        socket.write('erase', data);\n                        break;\n                    }\n                }\n            }\n        }\n    }\n\n    mouseUp() {\n        // pass\n    }\n\n    handleData(command: string, _data: any) {\n        // console.log(command, _data, canvas, context);\n\n        switch (command) {\n            case 'line': {\n                const data = _data as LineData;\n                this.canvas.drawLine(Point.fromArray(data.from), Point.fromArray(data.to), data.color, data.size);\n                break;\n            }\n            case 'dot': {\n                const data = _data as DotData;\n                this.canvas.fillCircleInSquare(Point.fromArray(data.pos).minus(new Point(data.size / 2)), data.size, data.color);\n                break;\n            }\n            case 'erase': {\n                const data = _data as EraseData;\n                this.canvas.drawLine(Point.fromArray(data.from), Point.fromArray(data.to), 'white', data.size);\n                break;\n            }\n            case 'binary': {\n                const data = _data as ArrayBuffer;\n                const blob = new Blob([data]);\n                const image = new Image();\n                image.onload = () => {\n                    this.canvas.drawImage(image, new Point(0));\n                    URL.revokeObjectURL(image.src);\n                };\n                image.src = URL.createObjectURL(blob);\n                break;\n            }\n            case 'clear': {\n                this.canvas.fill('white');\n                break;\n            }\n        }\n    }\n\n    get canvas(): Canvas {\n        return this._canvas as Canvas;\n    }\n\n    componentDidMount() {\n        socket.on('data', this.handleData.bind(this));\n\n        (this.refs.canvas as HTMLCanvasElement).addEventListener('touchstart', (e) => {\n            e.preventDefault();\n        }, { passive: false });\n        (this.refs.canvas as HTMLCanvasElement).addEventListener('touchmove', (e) => {\n            e.preventDefault();\n        }, { passive: false });\n        (this.refs.canvas as HTMLCanvasElement).addEventListener('touchend', (e) => {\n            e.preventDefault();\n        }, { passive: false });\n\n        this._canvas = new Canvas({\n            canvasElement: this.refs.canvas as HTMLCanvasElement,\n            pixelated: false,\n            opaque: true,\n            size: Point.fromArray(this.props.size)\n        });\n\n        this.canvas.context.lineJoin = 'round';\n        this.canvas.context.lineCap = 'round';\n\n        this.canvas.addEventListener('mousedown', (pos, e) => {\n            this.mouseDown(pos);\n        });\n        this.canvas.addEventListener('mousemove', (pos, isDown, lastPos) => {\n            this.mouseMove(pos, lastPos, isDown);\n        });\n        this.canvas.addEventListener('mouseup', () => {\n            this.mouseUp();\n        });\n\n        this.canvas.fill('white');\n    }\n\n    handleColorChange(color: string) {\n        this.setState({...this.state, color: color});\n    }\n\n    handleIncrement() {\n        this.setState({...this.state, size: Math.min(100, this.state.size + 1)});\n    }\n\n    handleDecrement() {\n        this.setState({...this.state, size: Math.max(0, this.state.size - 1)});\n    }\n\n    handleChange(value: string) {\n        let size: number;\n\n        if (value === \"\") {\n            size = 0;\n        } else {\n            size = parseInt(value);\n        }\n        \n        if (!isNaN(size)) {\n            size = Math.min(100, Math.max(0, size));\n            this.setState({...this.state, size: size});\n        }\n    }\n\n    handleToggleTool() {\n        if (this.state.tool === 'eraser') {\n            this.setState({...this.state, tool: 'pencil'});\n        } else {\n            this.setState({...this.state, tool: 'eraser'});\n        }\n    }\n\n    saveBoard() {\n        const link = document.createElement('a');\n        link.download = 'board.png';\n        link.href = this.canvas.canvas.toDataURL();\n        link.click();\n    }\n\n    clearBoard() {\n        socket.write('clear');\n    }\n\n    render() {\n        return (\n            <div className='page'>\n                <div className='menu'>\n                    <ColorCircle\n                        color={this.state.color}\n                        onChange={this.handleColorChange.bind(this)}\n                    />\n                    <SizeCircle\n                        size={this.state.size}\n                        onIncrement={this.handleIncrement.bind(this)}\n                        onDecrement={this.handleDecrement.bind(this)}\n                        onChange={this.handleChange.bind(this)}\n                    />\n                    <ToolCircle\n                        tool={this.state.tool}\n                        onToggle={this.handleToggleTool.bind(this)}\n                    />\n                    <button\n                        className='item fullSize'\n                        onClick={this.saveBoard.bind(this)}\n                    >\n                        💾\n                    </button>\n                    <button\n                        className='item fullSize'\n                        onClick={this.clearBoard.bind(this)}\n                    >\n                        ⎚\n                    </button>\n                </div>\n                <canvas\n                    ref='canvas'\n                    width={800}\n                    height={600}\n                />\n            </div>\n        );\n    }\n}","import React from 'react';\nimport './App.css';\nimport LoginPage from './LoginPage';\nimport { Socket } from './socket';\nimport DrawingPage from './DrawingPage';\n\nexport const socket = new Socket();\n\ninterface State {\n    connected: boolean,\n    size: number[]\n}\n\nexport default class App extends React.Component<{}, State> {\n    constructor(props: {}) {\n        super(props);\n\n        this.state = {\n            connected: false,\n            size: []\n        };\n\n        socket.on('data', this.handleData.bind(this));\n        socket.on('close', this.handleClose.bind(this));\n    }\n\n    handleClose() {\n        this.setState({...this.state, connected: false});\n    }\n\n    handleData(command: string, data: any) {\n        switch (command) {\n            case 'hi':\n                socket.write('join');\n                break;\n            case 'join':\n                console.log('successfully joined the server!');\n                this.setState({...this.state, connected: true, size: data.size});\n                break;\n        }\n    }\n\n    handleSubmit(server: string) {\n        console.log('connecting to server: ' + server);\n        socket.connect(server);\n    }\n\n    render() {\n        const pageToRender = !this.state.connected ?\n            <LoginPage\n                onSubmit={this.handleSubmit}\n            /> :\n            <DrawingPage\n                size={this.state.size}\n            />\n\n\n        return (\n            <div className='App'>\n                {pageToRender}\n            </div>\n        );\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}